import asyncio
from bleak import BleakScanner
from mqttportabo import send_payload
import time
from datetime import datetime

# Slovn√≠k zn√°m√Ωch UUID a jejich typ≈Ø za≈ô√≠zen√≠
KNOWN_DEVICE_UUIDS = {
    "0000180f-0000-1000-8000-00805f9b34fb": "Battery Service",
    "0000180a-0000-1000-8000-00805f9b34fb": "Device Information",
    "0000fe9f-0000-1000-8000-00805f9b34fb": "Google Fast Pair",
    "0000fd6f-0000-1000-8000-00805f9b34fb": "Windows Device",
    "9fa480e0-4967-4542-9390-d343dc5d04ae": "Apple Device",
    # M≈Ø≈æete p≈ôidat dal≈°√≠ UUID podle pot≈ôeby
}

def is_working_hours():
    """Kontroluje, zda je ƒças v pracovn√≠ dobƒõ (7:00 - 19:00)"""
    current_hour = datetime.now().hour
    return 7 <= current_hour < 19

def get_device_type(uuids):
    """Zjist√≠ typ za≈ô√≠zen√≠ podle UUID"""
    device_types = []
    for uuid in uuids:
        if uuid.lower() in KNOWN_DEVICE_UUIDS:
            device_types.append(KNOWN_DEVICE_UUIDS[uuid.lower()])
    return device_types if device_types else ["Unknown Device"]

def format_device_data(device):
    """Form√°tuje data ze za≈ô√≠zen√≠ do struktury pro MQTT"""
    uuids = device.metadata.get("uuids", [])
    return {
        "name": device.name or "Unknown",
        "mac": device.address,
        "rssi": device.rssi,
        "uuids": uuids,
        "device_types": get_device_type(uuids),
        "manufacturer_data": {
            str(k): v.hex() for k, v in device.metadata.get("manufacturer_data", {}).items()
        }
    }

async def scan_and_send():
    while True:  # Nekoneƒçn√° smyƒçka pro kontinu√°ln√≠ skenov√°n√≠
        if not is_working_hours():
            print("‚è∞ Mimo pracovn√≠ dobu (7:00-19:00), ƒçek√°m...")
            await asyncio.sleep(30)  # Kontrola ka≈æd√Ωch 30 sekund
            continue

        try:
            print("üîç Spou≈°t√≠m BLE skenov√°n√≠...")
            devices = await BleakScanner.discover(timeout=10.0)  # 10 sekund skenov√°n√≠

            if not devices:
                print("‚ùå Nenalezena ≈æ√°dn√° BLE za≈ô√≠zen√≠.")
                await asyncio.sleep(30)  # ƒåek√°n√≠ 30 sekund p≈ôed dal≈°√≠m skenem
                continue

            print(f"‚úÖ Nalezeno {len(devices)} za≈ô√≠zen√≠")

            for device in devices:
                device_data = format_device_data(device)
                payload = {
                    "timestamp": int(time.time()),
                    "data": device_data
                }
                
                # Print device type information
                device_types = device_data["device_types"]
                print(f"üì± Za≈ô√≠zen√≠ {device.address} typu: {', '.join(device_types)}")

                try:
                    send_payload("ble_devices", payload)
                    print(f"üì§ Odesl√°no: {device.address}")
                except Exception as e:
                    print(f"‚ùå Chyba p≈ôi odes√≠l√°n√≠ dat: {e}")

            await asyncio.sleep(30)  # ƒåek√°n√≠ 30 sekund p≈ôed dal≈°√≠m skenem

        except Exception as e:
            print(f"‚ùå Chyba p≈ôi skenov√°n√≠: {e}")
            await asyncio.sleep(5)  # Poƒçk√°me p≈ôed dal≈°√≠m pokusem

if __name__ == "__main__":
    print("üöÄ Spou≈°t√≠m BLE monitoring...")
    print("‚è∞ Pracovn√≠ doba: 7:00 - 19:00")
    asyncio.run(scan_and_send())
